---
jupyter:
  jupytext:
    formats: 'ipynb,qmd'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.1
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
from collections import defaultdict
from copy import copy
from copy import deepcopy
from functools import lru_cache
import datetime as dt
import operator as op
from pprint import pprint

from attr import define
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import pandas as pd
import pyrsistent
from pyrsistent import pvector, v


def read_input(s):
    with open(f"./input/{s}") as f:
        data = f.read().splitlines()
        return data

def pw(a, b, op=op.and_):
    return v([op(*_) for _ in zip(a, b)])

```
[Private Leaderboard - Advent of Code 2022](https://adventofcode.com/2022/leaderboard/private/view/190395)  
[Reference â€” NetworkX 2.8.8 documentation](https://networkx.org/documentation/stable/reference/index.html) . 



## Day 18

```{python}
test_input = """2,2,2
1,2,2
3,2,2
2,1,2
2,3,2
2,2,1
2,2,3
2,2,4
2,2,6
1,2,5
3,2,5
2,1,5
2,3,5""".splitlines()

data = test_input
# print(len(data))

def parse_input(data):
  result = []
  for line in data:
    result.append(list(map(int,line.split(","))))
  return pyrsistent.freeze(result)


parsed = parse_input(data)


def count_sides(cubes):
  found = set()
  sides = 0
  for cube in cubes:
    sides += 6
    if cube in found:
      raise ValueError(f"{cube} appears twice")
    found.add(cube)
    for dim in range(3):
      for delta in [-1, 1]:
        tst = cube.set(dim, cube[dim] + delta)
        # print(cube, tst)
        if tst in found:
          sides -= 2
          # print(f"{tst} as neighbour of {cube} found")
  return sides

# print(count_sides(parsed))

def main(data):
    cubes = parse_input(data)
    return count_sides(cubes)

result = main(data)
print(result)
assert result==64
# print(main(data))
# print("success")
```

```{python}
data = read_input("18_input.txt")

print("final result", main(data))
```

## Day 18 - Part 2

```{python}

data = test_input

my_cubes_thawed = []
for x in range(4):
  for y in range(3):
    for z in range(3):
      if y != 1:
        my_cubes_thawed.append(v(x,y,z))
        continue
      if x in [0,3] or z in [0,2]:
        my_cubes_thawed.append(v(x,y,z))
        continue
my_cubes = pyrsistent.freeze(my_cubes_thawed)
print(len(my_cubes), count_sides(my_cubes))

cubes = parse_input(data)

from pyrsistent import pset

def generated_candidates(mins, maxs):
  candidates = []
  for dim_a in range(3):
    dim_b, dim_c = set(range(3)) - {dim_a}
    proto = v(0,0,0)
    proto_min = proto.set(dim_a, mins[dim_a] - 1)
    proto_max = proto.set(dim_a, maxs[dim_a] + 1)
    for i in range(mins[dim_b], maxs[dim_b] + 1):
      for j in range(mins[dim_c], maxs[dim_c] + 1):
        vmin = proto_min.set(dim_b, i).set(dim_c, j)
        vmax = proto_max.set(dim_b, i).set(dim_c, j)
        candidates += [vmin, vmax]
  return set(candidates)

def find_neighbors(cand, mins, maxs):
    neighbors = []
    for dim in range(3):
      for delta in [-1, 1]:
        tst = cand.set(dim, cand[dim] + delta)
        if all(
          mins[dim] <= tst[dim] <= maxs[dim]
          for dim in range(3)
        ):
          neighbors.append(tst)
    return neighbors



def count_outside_sides(cubes):
  mins = {dim: min(cube[dim] for cube in cubes) for dim in range(3)}
  maxs = {dim: max(cube[dim] for cube in cubes) for dim in range(3)}
  print(f"{mins=}, {maxs=}")
  candidates = generated_candidates(mins, maxs)
  print("candidates:", candidates)
  # print(len(candidates))
  visited = set()
  found = {}
  heated = 0
  for cube in cubes:
    if cube in found:
      raise ValueError(f"{cube} appears twice")
    found[cube] = 0
  while candidates:
    cand = candidates.pop()
    neighbors = find_neighbors(cand, mins, maxs)
    visited.add(cand)
    # print("--", cand)
    for n in neighbors:
      if (n in visited) or (n in candidates):
        # print("---- done or candidate", len(visited), len(candidates))
        continue
      if n in found:
        found[n] += 1
        # print(f"----- heating {n}")
        heated += 1
        continue
      # print(f"---- new cand {n}", len(candidates))
      candidates.add(n)
  return sum(found.values()), heated

# print(count_sides(my_cubes), count_outside_sides(my_cubes))
print(count_sides(cubes), count_outside_sides(cubes))

def main2(data):
    result = None
    return result

# print("test result", main2(data))

```
```{python}
data = read_input("18_input.txt")
cubes = parse_input(data)
print(count_sides(cubes), count_outside_sides(cubes))

print("final result 2", main2(data))
```
