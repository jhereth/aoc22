---
jupyter:
  jupytext:
    formats: 'ipynb,qmd'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.1
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
from collections import defaultdict
from copy import deepcopy
from pprint import pprint

from attr import define

def read_input(s):
    with open(f"./input/{s}") as f:
        data = f.read().splitlines()
        return data
```


## Day 14

```{python}
test_input = """498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9
""".splitlines()

start_point = (500, 0)

test_result = 24

data = test_input

def parse_lines(data):
    result = []
    for line in data:
        # print(f"{line=}")
        poses = line.split(" -> ")
        pos_old = None
        line = []
        for p in poses:
            line.append(pos:=tuple(map(int, p.split(","))))
            if pos_old:
                assert pos[0] == pos_old[0] or pos[1] == pos_old[1]
            pos_old = pos
        result.append(line)
    return result

lines = parse_lines(data)
# pprint(lines)

def build_cave(lines):
    cave = {}
    for line in lines:
        # print(line)
        p1 = line.pop(0)
        while line:
            p2 = line.pop(0)
            # print("p2", p2)
            if p1[0] == p2[0]:
                i, j = 0, 1
            else:
                i, j = 1, 0
            lower, upper = min(p1[j], p2[j]), max(p1[j], p2[j])
            for k in range(lower, upper + 1):
                coords = [0, 0]
                coords[i] = p1[i]
                coords[j] = k
                # print(coords)
                cave[tuple(coords)] = "#"
            p1 = p2
    return cave
# pprint(lines)
cave = build_cave(lines)
# pprint(cave)

def max_y(cave):
    return max(_[1] for _ in cave.keys())

print("Cave depth", max_y(cave))

def next_pos(cave, pos):
    x, y = pos
    if cave.get(p:=(x, y+1)) is None:
        return p
    if cave.get(p:=(x-1, y+1)) is None:
        return p
    if cave.get(p:=(x+1, y+1)) is None:
        return p
    return None

def sand_fall(cave, start_pos=(500,-1)):
    cave = deepcopy(cave)
    depth = max_y(cave)
    i = 0
    path = [start_pos]
    while path:
        pos = path.pop()
        npos = next_pos(cave, pos)
        if npos:
            # print(i, npos, path)
            if npos[1] > depth:
                return i, cave
            path.append(pos)
            path.append(npos)
            continue
        cave[pos] = "o"
        pos = path.pop()
        i += 1
        # print(i, path)
    return i, cave

result = sand_fall(cave)
print("result", result)

def main(data):
    result = None
    lines = parse_lines(data)
    cave = build_cave(lines)
    result = sand_fall(cave)
    return result

assert main(data)[0] == test_result
print(main(data))
print("success")
```
### Sanity Checks
```{python}
data = read_input("14_input.txt")
parse_lines(data)
```

```{python}
data = read_input("14_input.txt")

print("final result", main(data))  # 888
```

## Day 14 - Part 2

```{python}

data = test_input

def dimensions(cave):
    min_x = min(_[0] for _ in cave.keys())
    max_x = max(_[0] for _ in cave.keys())
    depth = max(_[1] for _ in cave.keys())
    return min_x, max_x, depth

def build_floor(cave):
    cave = deepcopy(cave)
    min_x, max_x, depth = dimensions(cave)
    for i in range(min_x - 200, max_x + 201):
        cave[(i, depth + 2)] = "#"
    return cave


lines = parse_lines(data)
# pprint(lines)
cave = build_cave(lines)
# pprint(cave)
floored_cave = build_floor(cave)
# pprint(floored_cave)

i, filled_cave = sand_fall(floored_cave)

def print_cave(cave):
    minx, maxx, depth = dimensions(cave)
    print(minx, maxx, depth)
    rows = []
    for y in range(depth + 1):
        s = "|"
        for x in range(minx, maxx+1):
            s += cave.get((x,y), ".")
        rows.append(s + "|")
    return "\n".join(rows)

def main2(data):
    lines = parse_lines(data)
    cave = build_cave(lines)
    floored = build_floor(cave)
    result, filled = sand_fall(floored)
    return result, filled

result, filled = main2(data)
print("Result", result)
print(print_cave(filled))


# print("test result", main2(data))

```
```{python}
data = read_input("14_input.txt")

result, filled = main2(data)
print("Result", result)
print(print_cave(filled))
```


## Day 15

just thinking...

```
Sensort at 8,7
Beacon at 2, 10
dist = abs(8-2) + abs(7-10) = 9

y = 12

min x: 
    abs(12-7) = 5
    dist = 9 - 5 = 4
    8-4 = 4
max x:     8 + 4 = 12

dist((8,7),(4,12)) = 4 + 5 = 9
dist((8,7),(12,12)) = 4 + 5 = 9
```

```{python}
test_input = """Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3""".splitlines()

data = test_input
from attr import define
@define
class Sensor:
    x: int
    y: int
    beac_x: int
    beac_y: int
    distance: int

import re
def parse_input(data):
    sensors = []
    for line in data:
        # print(line)
        m = re.match(r"^Sensor at x=(?P<sens_x>-?[0-9]+), y=(?P<sens_y>-?[0-9]+): closest beacon is at x=(?P<beac_x>-?[0-9]+), y=(?P<beac_y>-?[0-9]+)", line)
        sens_x, sens_y, beac_x, beac_y = int(m["sens_x"]), int(m["sens_y"]), int(m["beac_x"]), int(m["beac_y"])
        dist = abs(sens_x - beac_x) + abs(sens_y-beac_y)
        # print(sens_x, sens_y, beac_x, beac_y, dist)
        sensors.append(Sensor(sens_x, sens_y, beac_x, beac_y, dist))
        # print(m.groups())
    return sensors

import operator as op
def notthere(sensors, row, cand_max=20):
    segments = []
    knowns = set()
    for s in sensors:
        if s.y == row:
            knowns.add(s.x)
        if s.beac_y == row:
            knowns.add(s.beac_x)
        # print(s.distance, s.y, row)
        dist = s.distance - abs(s.y - row)
        if dist < 0:
            continue
        minx, miny = s.x - dist, s.x + dist
        # print(s, dist, minx, miny)
        segments.append((minx, miny))
    segments.sort(key=op.itemgetter(0))
    count = 0
    pos = min(_[0] for _ in segments)
    candidates = [_ for _ in range(0, pos)]
    # print(row, "1", candidates)
    for segment in segments:
        x1, x2 = segment
        # print("----", x1, x2)
        if pos <= x1:
            candidates += [_ for _ in range(pos, x1)]
            # print(row, "2", candidates)
            # print("case 1")
            count += x2 - x1 + 1
            pos = x2 + 1
            # continue
        if x1 < pos:
            if x2 < pos:
                # print("case 2")
                continue
            # print("case 3")
            count += x2 - pos + 1
            pos = x2 + 1
        # print(pos, count)
    candidates += [_ for _ in range (pos, cand_max)]
    # print(row, "3", candidates)
    return count - len(knowns), candidates

sensors = parse_input(data)
x = notthere(sensors, 10)
# print(x)

def main(data, row):
    sensors = parse_input(data)
    result, _ = notthere(sensors, row)
    return result


assert main(data, 10) == 26
# print(main(data))
print("success")
```

```{python}
data = read_input("15_input.txt")

print("final result", main(data, 2000000))
```

## Day 15 - Part 2

```{python}

data = test_input
sensors = parse_input(data)

cand_list = [notthere(sensors, row)[1] for row in range(21)]

for i, row in enumerate(cand_list):
    if row:
        print(i, row)

def main2(data):
    result = None
    return result

# print("test result", main2(data))

```
```{python}
data = read_input("15_input.txt")
sensors = parse_input(data)

# print(sensors)
from tqdm import tqdm
cand_list = []

maxcand = 4_000_000
for row in tqdm(range(4_000_000)):
    # print(_)
    cand_list.append(notthere(sensors, row, cand_max=maxcand)[1])

for i, row in enumerate(cand_list):
    if row:
        print(i, row)
        pass

# 2639657 [3435885]
print("final result 2", main2(data))
```


```{python}
print("Tuning Frequency", 2639657 + 4_000_000 * 3435885)

```
## Day 16

```{python}
test_input = """Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II""".splitlines()

data = test_input

@define
class Valve:
    name: str
    rate: int
    targets: list[str]

def parse_valves(data):
    valves = []
    for line in data:
        # print(line.split())
        match line.split():
            case _, name, _, _, rate_, _, _, _, _, *targets_:
                rate = int(rate_.strip(";").split("=")[1])
                targets = [t.strip(",") for t in targets_]
                # print(name, rate, targets)
                valves.append(Valve(name, rate, targets))
    return valves

valves = parse_valves(data)
# pprint(valves)


import networkx as nx

def build_graph(valves):
    G = nx.Graph()
    for v in valves:
        G.add_node(v.name, rate=v.rate)
    for v in valves:
        for t in v.targets:
            G.add_edge(v.name, t, weight=1)
    return G

graph = build_graph(valves)
import matplotlib.pyplot as plt
def draw_graph(graph):
    pos = nx.planar_layout(graph)
    plt.clf()
    labels = nx.draw_networkx_labels(graph, pos=pos, labels={n: f"({n}, {graph.nodes[n]['rate']})" for n in graph.nodes})
    nx.draw(graph, pos=pos, node_size=12)
    plt.show()



import copy

def simplify_graph(graph):
    simple = deepcopy(graph)
    for n in graph.nodes:
        # print(simple[n])
        if len(edges:=simple.edges(n)) == 2 and simple.nodes[n]["rate"] == 0:
            new_weight = sum(_["weight"] for _ in simple[n].values())
            first, second = list(simple[n].keys())
            simple.add_edge(first, second, weight=new_weight)
            simple.remove_node(n)
            # print(f"Step for {n}")
            # draw_graph(simple)
    return simple

# draw_graph(graph)
simple = simplify_graph(graph)
# pprint(simple.nodes(data=True))



def explore_main(graph, budget=30):
    distances = dict(nx.all_pairs_dijkstra_path_length(graph, weight="weight"))
    targets = {n for n in graph.nodes if graph.nodes[n]["rate"] > 0}
    start_pos = "AA"
    candidates = {}
    # pprint(targets)
    print(start_pos)
    def explore_step(path, budget, targets, release=0):
        pos =path[-1]
        rate = graph.nodes[pos]["rate"]
        if rate > 0:
            budget = budget - 1
            release += budget * rate
        # print(f"= : ", path, budget, rate, targets, release)
        for t in targets:
            if (d:=distances[pos][t]) <= budget:
                explore_step((*path, t), budget-d, targets - {t}, release)
        candidates[path] = release
    explore_step((start_pos,), budget, targets)
    # pprint(candidates)
    return candidates

candidates = explore_main(simple)

# nx.draw(graph)

# draw_graph(graph)
def pressure_released(candidates):
    return max(candidates.values())
pprint(candidates)
released = pressure_released(candidates)
print(f"{released=}") 
assert released == 1651

def main(data):
    result = None
    valves = parse_valves(data)
    graph = build_graph(valves)
    candidates = explore_main(graph)
    print(f"explored {len(candidates)} paths")
    released = pressure_released(candidates)
    return released


result=main(data)
print(f"{result=}")
assert result == 1651
print("success")
```

```{python}
data = read_input("16_input.txt")
# valves = parse_valves(data)
# pprint([v.name for v in valves])
# graph = build_graph(valves)
# simple = simplify_graph(graph)
# srtd = sorted(valves, key=lambda v: len(v.targets))
# srtd = sorted(valves, key=lambda v: v.rate)
# pprint(srtd)
# print(len(srtd))
# draw_graph(simple)

print("final result", main(data))  # 1741
```

## Day 16 - Part 2

```{python}


from copy import copy
import datetime as dt

data = test_input
data = read_input("16_input.txt")
valves = parse_valves(data)
graph = build_graph(valves)
# draw_graph(graph)
def explore_main2(graph):
    distances = dict(nx.all_pairs_dijkstra_path_length(graph, weight="weight"))
    targets = sorted([(n, r) for n in graph.nodes if (r:=graph.nodes[n]["rate"]) > 0], key=lambda x: x[1], reverse=True)
    print(targets)
    targets = [_[0] for _ in targets]
    print(targets)
    pos = ["AA", "AA"]
    next_time = [0, 0]
    candidates = {}
    total = 26
    released = 0

    def one_round(minute, path, pos, next_time, targets, released, max_release=0, cnt=0):
        i = min(_ for _ in range(2) if next_time[_]==minute)
        cnt += 1
        if minute <= 26:
            # print(f"XX01: {minute=}, {next_time=}, {i=}, {pos=}, {targets=}, {released=}, {cnt=}")
            start_pos = copy(pos)
            orig_path = copy(path)
            orig_targets = copy(targets)
            rate = graph.nodes[pos[i]]["rate"]
            released += (new_release:=rate * (remain:=total - minute))
            rel_str = f"{minute}: {i} rel. {pos[i]} ({released} (=+{new_release}={rate}*{remain}))"
            # print("XX02", rel_str)
            for k, t in enumerate(targets):
                # print(f"TT01: {i=}, {k=}, {t=}, {minute=}, {targets=}, {pos=}, pos[i]={pos[i]}, {next_time=}, {path=}, {cnt=}")
                d = distances[start_pos[i]][t]
                next_time[i] = minute + d + 1
                path = (*orig_path, (i, t, next_time[i]))
                new_targets = copy(orig_targets)
                new_targets.remove(t)
                if len(path) <= 2:
                    print(f"{dt.datetime.now()} {cnt=}-{len(path)}: {max_release=} of {len(candidates)} {path=} {new_targets=} ")
                # print(rel_str + f", moves {start_pos[i]}->{t} ({next_time[i]}, {d=}, {path=})")
                pos[i] = t
                # path = (*path, (i, t))
                # targets -= {t}
                cnt, max_release = one_round(
                    minute=min(*next_time),
                    path=path,
                    pos=copy(pos),
                    next_time=copy(next_time),
                    targets=new_targets,
                    released=released, 
                    max_release=max_release,
                    cnt=cnt,
                    )
            else:
                # print(rel_str)
                pass
            pos[i] = None
            next_time[i] = 999
            # print(f"{minute}: no more targets. Processing {i}, {pos=}, {next_time=}, {path=}")
            if pos[1-i] is None:
                if released > max_release:
                    max_release = released
                    candidates[path] = released
                    print(f"=== {len(candidates)}.th candidate ({path=}, {released=}, {max_release=})")
                return cnt, max_release
            else:
                return one_round(
                    minute=next_time[1-i], 
                    path=path,
                    pos=pos,
                    next_time=next_time,
                    targets=targets,
                    released=released,
                    max_release=max_release,
                    cnt=cnt,
                    )
        else:
            # print(f"Running out of time {path=}")
            return cnt, max_release
    one_round(0, (), copy(pos), copy(next_time), copy(targets), released, 0, 0)
    # print(pos, next_time, targets)
    return candidates

candidates = explore_main2(graph)
print("XX", max(candidates.values()), "YY", len(candidates))

# [('OF', 25), ('RR', 24), ('EK', 23), ('EE', 22), ('VB', 20), ('KR', 17), ('BT', 15), ('DG', 11), ('CL', 10), ('OT', 9), ('CS', 7), ('RE', 6), ('YX', 5), ('MS', 4), ('GD', 3)]
# 2022-12-16 18:28:12.726880 cnt=1-1: max_release=0 of 0 path=((0, 'OF', 12),) new_targets=['RR', 'EK', 'EE', 'VB', 'KR', 'BT', 'DG', 'CL', 'OT', 'CS', 'RE', 'YX', 'MS', 'GD']
# ...
# 2022-12-16 19:11:03.909909 cnt=1087717034-2: max_release=2302 of 63 path=((0, 'EE', 3), (1, 'MS', 4)) new_targets=['OF', 'RR', 'EK', 'VB', 'KR', 'BT', 'DG', 'CL', 'OT', 'CS', 'RE', 'YX', 'GD'] 
# === 64.th candidate (path=((0, 'EE', 3), (1, 'MS', 4), (0, 'EK', 6), (1, 'VB', 7), (0, 'CL', 11), (1, 'KR', 10), (1, 'OT', 14), (0, 'CS', 14), (0, 'DG', 18), (1, 'BT', 17), (1, 'YX', 20), (0, 'GD', 21), (1, 'RE', 27), (0, 'RE', 29)), released=2316, max_release=2316)
# 2022-12-16 19:13:33.196494 cnt=1151572812-2: max_release=2316 of 64 path=((0, 'EE', 3), (1, 'GD', 3)) new_targets=['OF', 'RR', 'EK', 'VB', 'KR', 'BT', 'DG', 'CL', 'OT', 'CS', 'RE', 'YX', 'MS'] 
# ...
# 2022-12-16 22:08:30.520730 cnt=5532430059-2: max_release=2316 of 64 path=((0, 'GD', 3), (1, 'GD', 3)) new_targets=['OF', 'RR', 'EK', 'EE', 'VB', 'KR', 'BT', 'DG', 'CL', 'OT', 'CS', 'RE', 'YX', 'MS'] 
# XX 2316 YY 64
# Runtime 220 minutes, solution found after 45 minutes (20%)

    # pprint(targets)
    # print(start_pos)
    # def explore_step(path, budget, targets, release=0):
    #     pos =path[-1]
    #     rate = graph.nodes[pos]["rate"]
    #     if rate > 0:
    #         budget = budget - 1
    #         release += budget * rate
    #     # print(f"= : ", path, budget, rate, targets, release)
    #     for t in targets:
    #         if (d:=distances[pos][t]) <= budget:
    #             explore_step((*path, t), budget-d, targets - {t}, release)
    #     candidates[path] = release
    # explore_step((start_pos,), budget, targets)
    # pprint(candidates)


# pprint(explore_main2(graph))

def main2(data):
    result = None
    return result

# print("test result", main2(data))

```
```{python}
data = read_input("16_input.txt")

print("final result 2", main2(data))
```

